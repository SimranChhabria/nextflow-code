

process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    shell  = ['/bin/bash', '-euo', 'pipefail']

   withLabel:process_single {
        cpus          = { check_max( 1                  , 'cpus'    ) }
        memory        = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_medium {
        cpus          = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    
    withLabel:process_high {
        cpus          = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 16.h  * task.attempt, 'time'    ) }
    }

    withName:'FASTQC'{
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }

   withName: 'TRIMGALORE' {
       cpus            = { check_max( 6 * task.attempt, 'cpus' ) }
       memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
   
   withName: 'FASTP' {
        cpus            = { check_max( 6 * task.attempt, 'cpus' ) }
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
   }

   withName: 'BWAMEM1_MEM|BWAMEM2_MEM' {
        cpus            = { check_max( 6 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
    }
   
   withName: 'BOWTIE2_BUILD|BOWTIE2_ALIGN' {
        cpus            = { check_max( 6 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
    }
}

if (!params.skip_variants) {
    process {
        withName: 'BOWTIE2_BUILD' {
            ext.args = '--seed 1'
            publishDir = [
                path: { "${params.outdir}/genome" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }

        withName: 'BOWTIE2_ALIGN' {
            ext.args = '--local --very-sensitive-local --seed 1'
            ext.args2 = '-F4 -bhS'
            publishDir = [
                [
                    path: { "${params.outdir}/variants/bowtie2/log" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/variants/bowtie2/unmapped" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    enabled: params.save_unaligned
                ]
            ]
        }

        withName: 'SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                path: { "${params.outdir}/variants/bowtie2" },
                mode: params.publish_dir_mode,
                pattern: "*.bam"
            ]
        }

        withName: 'SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/variants/bowtie2" },
                mode: params.publish_dir_mode,
                pattern: "*.bai"
            ]
        }

        withName: 'BAM_STATS_SAMTOOLS' {
            ext.prefix = { "${meta.id}.sorted.bam" }
            publishDir = [
                path: { "${params.outdir}/variants/bowtie2/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: 'MULTIQC' {
            publishDir = [
                path: { "${params.outdir}" },
                mode: params.publish_dir_mode,
                pattern: "*.{html}"
            ]
        }

        withName: 'MULTIQC_TSV_FAIL_MAPPED' {
            publishDir = [
                path: { "${params.outdir}/multiqc" },
                enabled: false
            ]
        }
    }
}    



